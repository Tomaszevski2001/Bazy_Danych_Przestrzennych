CREATE EXTENSION postgis;

CREATE SCHEMA mapa;

create table buil(id integer primary key not null, geometry geometry, name varchar(15));
CREATE TABLE mapa.poi(ID INT PRIMARY KEY   not null, Geom geometry  , name VARCHAR(15) ) ;
CREATE TABLE roads(id INT, name VARCHAR(50),Geom GEOMETRY);



INSERT INTO roads Values(1,'roadX',ST_GeomFromText('LINESTRING(0 4.5, 4.5 12)',0))
INSERT INTO roads Values(2,'roadY',ST_GeomFromText('LINESTRING(7.5 10.5, 7.5 0)',0))
    
SELECT *,ST_AsText(roads.geom) AS WKT FROM roads;	

-- WPISANIE DANYCH 



insert into buil(id, geometry, name) values (1, ST_GeomFromText('POLYGON((8 4, 8 1.5, 10.5 1.5, 10.5 4, 8 4))',0), 'BuildingA');
insert into buil(id, geometry, name) values (2, ST_GeomFromText('POLYGON((4 7, 6 7, 6 5, 4 5, 4 7))',0), 'BuildingB');
insert into buil(id, geometry, name) values (3, ST_GeomFromText('POLYGON((3 6, 5 6, 5 8, 3 8, 3 6))',0), 'BuildingC');
insert into buil(id, geometry, name) values (4, ST_GeomFromText('POLYGON((9 9, 10 9, 10 8, 9 8, 9 9))',0), 'BuildingD');
insert into buil(id, geometry, name) values (5, ST_GeomFromText('POLYGON((1 2, 2 2, 2 1, 1 1, 1 2))',0), 'BuildingF');

select * from buil



insert into poi(id, geometry, name) values (1, ST_GeomFromText('POINT(1 3.5)',0), 'G');
insert into poi(id, geometry, name) values (2, ST_GeomFromText('POINT(5.5 1.5)',0), 'H');
insert into poi(id, geometry, name) values (3, ST_GeomFromText('POINT(9.5 6)',0), 'I');
insert into poi(id, geometry, name) values (4, ST_GeomFromText('POINT(6.5 6)',0), 'J');
insert into poi(id, geometry, name) values (5, ST_GeomFromText('POINT(6 9.5)',0), 'K');


select * from poi
select * from roads;







--zad 1 Wyznacz całkowitą długość dróg w analizowanym mieście.

ST_Length(geom) -> DOUBLE


--ST_Length 

SELECT ST_Length(geom)  FROM roads;

SELECT SUM(ST_Length(geom)) AS totalLength  FROM roads;






--zad 2 Wypisz geometrię (WKT), pole powierzchni oraz obwód poligonu reprezentującego BuildingA.
--ST_AsEWKT- geometrie
--ST_Area- pole
--ST_Perimeter- obwód

select ST_AsEWKT(buil.geometry) as GEOMETRIA, ST_Area(buil.geometry) as Pole, ST_Perimeter(buil.geometry) as OBWÓD
from buil 
where buil.name='BuildingA';



--3 Wypisz nazwy i pola powierzchni wszystkich poligonów w warstwie budynki. Wyniki posortuj alfabetycznie.

--ST_Area FUNKCJA WYPISUJACA OBSZARY Z GEOMETRY 


SELECT buil.name , ST_Area(buil.geometry) as NAZWY_BUDYNKOW from buil order by buil.name ;


--4. Wypisz nazwy i obwody 2 budynków o największej powierzchni.

--ST_Perimeter - zwraca obwód 

SELECT buil.name , ST_Perimeter(buil.geometry) as OBWÓD from buil order by ST_Perimeter(buil.geometry) desc limit 2 ;


--5 Wyznacz najkrótszą odległość między budynkiem BuildingC a punktem G.

--ST_Distance-funkcja odległosci pomiedzy dwoma rzeczami 

SELECT St_Distance(buil.geometry,poi.geometry) as ODLEGLOSC from buil , poi
where buil.name='BuildingC'and poi.name= 'G';


6 --Wypisz pole powierzchni tej części budynku BuildingC, która znajduje się w odległości większej niż 0.5 od budynku BuildingB.

--ST_Area-pole
-- ST_Difference - odleglosc pomiedzy 2 odleglosciami
--ST_buffer -WIELOKĄT reprezentujący wszystkie punkty, których odległość od geometrii/geografii jest mniejsza lub równa podanej odległości

select ST_Area(ST_Difference((select buil.geometry 
				  from buil
				  where name='BuildingC'), ST_buffer((select geometry 
				  from buil
				  where name='BuildingB'),0.5))) as ODLEGLOSC;

 


--7.Wybierz te budynki, których centroid (ST_Centroid) znajduje siępowyżej drogi RoadX. 

-- ST_Y- Zwróć współrzędną y
--ST_Centroid oblicza punkt, który jest geometrycznym środkiem masy geometrii

SELECT name FROM buil
WHERE (ST_Y((ST_Centroid(geometry))) > 4);















--7.Wybierz te budynki, których centroid (ST_Centroid) znajduje siępowyżej drogi RoadX. 

SELECT buil.name FROM buil, roads
WHERE roads.name = 'roadX'
AND ST_Y(ST_Centroid(buil.geometry))> ST_Y(ST_Centroid(roads.geom))












--8. Oblicz pole powierzchni tych części budynku BuildingC i poligonu o współrzędnych (4 7, 6 7, 6 8, 4 8, 4 7), które nie są wspólne dla tych dwóch obiek
--ST_Area -pole
--ST_SymDifference- zwraca geometrię reprezentującą części geometrii A i B, które się nie przecinają.
--ST_GeomFromText - 

SELECT ST_Area(ST_SymDifference(geometry, ST_GeomFromText('POLYGON((4 7, 6 7, 6 8, 4 8, 4 7))')))
	FROM buil
	WHERE name = 'BuildingC'











